Transform: AWS::Serverless-2016-10-31

Metadata:
  AWS::ServerlessRepo::Application:
    Name: WxPusher-Notifier
    Description: WxPusher Notifier
    Author: Niceman
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README_sar.md
    Labels: ["WxPusher", "Eventbridge"]
    HomePageUrl: https://github.com/liushaojun/AWS-Lambda-notifier
    SemanticVersion: 1.4.8
    SourceCodeUrl: https://github.com/liushaojun/AWS-Lambda-notifier

Parameters:
  WxpusherToken:
    Type: String
    Description: "WxPusher访问令牌"
  WxpusherTopicIds:
    Type: String
    Description: "WxPusher主题ID列表"

Resources:
  WxPusherNotifierLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: DingTalkNotifierCommon
      Description: v.1.0.5
      ContentUri: layer/
      CompatibleRuntimes:
        - python3.9

  WxPusherNotifierLambda:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: notifier/
      Handler: app.lambda_handler
      Layers:
        - !Ref WxPusherNotifierLambdaLayer
      Environment:
        Variables:
          WXPUSHER_TOKEN:
            Ref: WxpusherToken
          WXPUSHER_TOPIC_IDS:
            Ref: WxpusherTopicIds

      Runtime: python3.9
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref ServerlessNotifierSNSTopic

  ServerlessNotifierSNSTopic:
    Type: AWS::SNS::Topic

  ServerlessNotifierSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: SNSTopicPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: Default_Statement
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - sns:Publish
            Resource: !Ref ServerlessNotifierSNSTopic
            Condition:
              StringEquals:
                "AWS:SourceOwner": !Ref "AWS::AccountId"
          - Sid: Eventbridge_Statement
            Effect: Allow
            Principal:
              Service: "events.amazonaws.com"
            Action:
              - sns:Publish
            Resource: !Ref ServerlessNotifierSNSTopic
          - Sid: Costalerts_Statement
            Effect: Allow
            Principal:
              Service: "costalerts.amazonaws.com"
            Action:
              - sns:Publish
            Resource: !Ref ServerlessNotifierSNSTopic
      Topics:
        - !Ref ServerlessNotifierSNSTopic

  EventRuleEC2StateChange:
    Type: AWS::Events::Rule
    Properties:
      Description: Rule for EC2 instance state change
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - EC2 Instance State-change Notification
        detail:
          state:
            - running
            - stopped
            - terminated
      Targets:
        - Arn: !Ref ServerlessNotifierSNSTopic
          Id: Send2SNS
          InputTransformer:
            InputPathsMap:
              instance-id: "$.detail.instance-id"
              region: "$.region"
              state: "$.detail.state"
              time: "$.time"
            InputTemplate: "\"EC2状态变化告警: \\n时间: <time> \\n区域: <region> \\n实例id: <instance-id> \\n状态: <state>\""

  EventRuleAwsHealth:
    Type: AWS::Events::Rule
    Properties:
      Description: Rule for AWS Health event
      EventPattern:
        source:
          - aws.health
        detail-type:
          - AWS Health Event
      Targets:
        - Arn: !Ref ServerlessNotifierSNSTopic
          Id: Send2SNS
          InputTransformer:
            InputPathsMap:
              resource: "$.resources[0]"
              region: "$.region"
              time: "$.time"
              type: "$.detail.eventTypeCode"
              desc: "$.detail.eventDescription[0].latestDescription"
            InputTemplate: "\"AWS健康事件: \\n时间: <time> \\n区域: <region> \\n受影响资源: <resource> \\n类型: <type> \\n描述: <desc>\""

  EventRuleAwsHealthAbuse:
    Type: AWS::Events::Rule
    Properties:
      Description: Rule for AWS Health Abuse event
      EventPattern:
        source:
          - aws.health
        detail-type:
          - AWS Health Abuse Event
      Targets:
        - Arn: !Ref ServerlessNotifierSNSTopic
          Id: Send2SNS
          InputTransformer:
            InputPathsMap:
              resource: "$.resources"
              region: "$.region"
              time: "$.time"
              startTime: "$.detail.startTime"
              type: "$.detail.eventTypeCode"
              desc: "$.detail.eventDescription[0].latestDescription"
            InputTemplate: "\"AWS异常使用事件: \\n通知生成时间: <time> \\n事件开始时间: <startTime> \\n区域: <region> \\n受影响资源: <resource> \\n类型: <type> \\n描述: <desc>\""

  EventRuleCloudWatchAlarmStateChange:
    Type: AWS::Events::Rule
    Properties:
      Description: Rule for Cloud Watch alarm state change
      EventPattern:
        detail-type:
          - CloudWatch Alarm State Change
        source:
          - aws.cloudwatch
      Targets:
        - Id: Send2SNS
          Arn: !Ref ServerlessNotifierSNSTopic
          InputTransformer:
            InputPathsMap:
              alarmName: $.detail.alarmName
              description: $.detail.configuration.description
              reason: $.detail.state.reason
              region: $.region
              resources: $.resources
              time: $.time
            InputTemplate: "\"Cloud Watch 状态变化告警: \\n时间: <time> \\n区域: <region> \\n资源: <resources> \\n告警名称: <alarmName> \\n描述: <description> \\n原因: <reason>\""

Outputs:
  EventBusName:
    Description: Event Bus name for integration.
    Value: "default"
  SnsTopicArn:
    Description: SNS topic ARN for integration.
    Value: !Ref ServerlessNotifierSNSTopic
